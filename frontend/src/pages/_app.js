






























































































export default SimpleMap;}    );        </div>            <BottomNav />            </div>                )}                    </div>                        </div>                            <p className="mt-4 text-gray-600">Loading map...</p>                            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-sky-500"></div>                        <div className="flex flex-col items-center">                    <div className="absolute inset-0 bg-white flex items-center justify-center" style={{ zIndex: 1000 }}>                {isLoading && (                </APIProvider>                    </Map>                        ))}                            </AdvancedMarker>                                />                                    isSelected={selectedMarker?.id === property.id}                                    property={property}                                <MarkerContent                             >                                zIndex={selectedMarker?.id === property.id ? 100 : 1}                                onClick={() => handleMarkerClick(property)}                                position={property.position}                                key={property.id}                            <AdvancedMarker                        {properties.map((property) => (                    >                        }}                            clickableIcons: false,                            gestureHandling: 'greedy',                        options={{                        disableDefaultUI={true}                        onLoaded={() => setIsLoading(false)}                        mapId={process.env.REACT_APP_PERSONAL_MAP_ID}                        tilt={45}                        center={currentPosition}                         defaultZoom={17}                     <Map                 <APIProvider apiKey={GOOGLE_MAPS_API_KEY}>            <div className="h-screen">        <div className="h-screen">    return (    };        }            });                lng: property.position.lng                lat: property.position.lat - 0.0005, // slight offset            setCurrentPosition({        if (selectedMarker?.id !== property.id) {        // Center map on selected marker with slight offset for info window        setSelectedMarker(selectedMarker?.id === property.id ? null : property);    const handleMarkerClick = (property) => {    }, []);        }            setIsLoading(false);            console.error("Geolocation is not supported by this browser.");        } else {            );                }                    setIsLoading(false);                    console.error("Error getting location:", error);                (error) => {                },                    setIsLoading(false);                    });                        lng: position.coords.longitude                        lat: position.coords.latitude,                    setCurrentPosition({                (position) => {            navigator.geolocation.getCurrentPosition(        if (navigator.geolocation) {    useEffect(() => {    const [selectedMarker, setSelectedMarker] = useState(null);    const [currentPosition, setCurrentPosition] = useState(defaultCenter);    const [isLoading, setIsLoading] = useState(true);    const defaultCenter = { lat: 40.4289616, lng: -86.922324 };function SimpleMap() {const GOOGLE_MAPS_API_KEY = process.env.REACT_APP_GOOGLE_API_KEY;import '../styles/globals.css';import MarkerContent from './MarkerContent';import { properties } from '../data/properties';import BottomNav from './BottomNav';import { APIProvider, Map, AdvancedMarker } from "@vis.gl/react-google-maps";import React, { useState, useEffect } from "react";"use client";